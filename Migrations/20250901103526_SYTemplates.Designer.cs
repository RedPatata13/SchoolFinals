// <auto-generated />
using System;
using Finals.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finals.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901103526_SYTemplates")]
    partial class SYTemplates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ClassSectionModelCourseModel", b =>
                {
                    b.Property<string>("ClassSectionModelSectionID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultCoursesCourseId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ClassSectionModelSectionID", "DefaultCoursesCourseId");

                    b.HasIndex("DefaultCoursesCourseId");

                    b.ToTable("ClassSectionDefaultCourses", (string)null);
                });

            modelBuilder.Entity("Finals.Models.AdminModel", b =>
                {
                    b.Property<string>("AdminID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("AdminModels");
                });

            modelBuilder.Entity("Finals.Models.ClassBatchModel", b =>
                {
                    b.Property<string>("BatchId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClassBatchStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Default");

                    b.Property<string>("ClassSectionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("BatchId");

                    b.HasIndex("ClassSectionId");

                    b.ToTable("ClassBatches");
                });

            modelBuilder.Entity("Finals.Models.ClassEntryModel", b =>
                {
                    b.Property<string>("EntryId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BatchId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClassSectionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EntryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("EntryId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ClassSectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassEntries");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionEditLog", b =>
                {
                    b.Property<string>("LogId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EditDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EditDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EditType")
                        .HasColumnType("int");

                    b.Property<string>("EditedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("LogId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("SectionId");

                    b.ToTable("ClassSectionsEdits");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionModel", b =>
                {
                    b.Property<string>("SectionID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("YearLevel")
                        .HasColumnType("int");

                    b.HasKey("SectionID");

                    b.HasIndex("ProgramId");

                    b.ToTable("ClassSections", (string)null);
                });

            modelBuilder.Entity("Finals.Models.ClassSectionRegistration", b =>
                {
                    b.Property<string>("ClassSectionRegistrationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClassSectionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClassSectionTermDataModelClassSectionTermDataId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ClassSectionRegistrationId");

                    b.HasIndex("ClassSectionId");

                    b.HasIndex("ClassSectionTermDataModelClassSectionTermDataId");

                    b.HasIndex("StudentID");

                    b.ToTable("ClassSectionRegistration");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionTermDataModel", b =>
                {
                    b.Property<string>("ClassSectionTermDataId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClassSectionId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SchoolYearId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TermId")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("ClassSectionTermDataId");

                    b.HasIndex("ClassSectionId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("TermId");

                    b.ToTable("ClassSectionTermDatas");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionTransitionModel", b =>
                {
                    b.Property<string>("TransitionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FromSectionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ToSectionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<double>("TransitionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.HasKey("TransitionId");

                    b.HasIndex("FromSectionId");

                    b.HasIndex("ToSectionId");

                    b.ToTable("ClassSectionTransitions", (string)null);
                });

            modelBuilder.Entity("Finals.Models.CourseModel", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("DefaultUnits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("CourseId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Finals.Models.CourseModel_Assigned", b =>
                {
                    b.Property<string>("AssignedCourseModelId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssignedId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SemesterId")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TeacherId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TermId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("AssignedCourseModelId");

                    b.HasIndex("AssignedId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.ToTable("AssignedCourses");
                });

            modelBuilder.Entity("Finals.Models.CourseTemplateItem", b =>
                {
                    b.Property<string>("ItemId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssignerId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Units")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("ItemId");

                    b.HasIndex("AssignerId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CourseTemplatesItems");
                });

            modelBuilder.Entity("Finals.Models.CourseTemplateModel", b =>
                {
                    b.Property<string>("TemplateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TemplateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProgramId");

                    b.ToTable("CourseTemplates");
                });

            modelBuilder.Entity("Finals.Models.GradesClassification", b =>
                {
                    b.Property<string>("GradesClassificationId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Depth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParentId")
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(-1.0);

                    b.HasKey("GradesClassificationId");

                    b.HasIndex("ParentId");

                    b.ToTable("GradesClassifications");
                });

            modelBuilder.Entity("Finals.Models.GradesTreeModel", b =>
                {
                    b.Property<string>("TreeId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("RootId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TreeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("TreeId");

                    b.HasIndex("RootId");

                    b.ToTable("GradesTreeConfigurations");
                });

            modelBuilder.Entity("Finals.Models.ProgramModel", b =>
                {
                    b.Property<string>("ProgramId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastEditorId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProgramDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProgramId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastEditorId");

                    b.ToTable("programmodel", (string)null);
                });

            modelBuilder.Entity("Finals.Models.ProgramModel_Edits", b =>
                {
                    b.Property<string>("Edit_ID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Edit")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("EditedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Edit_ID");

                    b.HasIndex("EditorId");

                    b.HasIndex("ProgramId");

                    b.ToTable("programmodel_edits", (string)null);
                });

            modelBuilder.Entity("Finals.Models.SchoolYearModel", b =>
                {
                    b.Property<string>("SchoolYearId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegistrationOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SchoolYearType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SchoolYearId");

                    b.ToTable("SchoolYearModels");
                });

            modelBuilder.Entity("Finals.Models.SchoolYearRegistration", b =>
                {
                    b.Property<string>("SYRegistrationId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("SchoolYearId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("SYRegistrationId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("UserId");

                    b.ToTable("SchoolYearRegistrations");
                });

            modelBuilder.Entity("Finals.Models.StudentModel", b =>
                {
                    b.Property<string>("StudentID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("StudentID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StudentModels");
                });

            modelBuilder.Entity("Finals.Models.TeacherModel", b =>
                {
                    b.Property<string>("TeacherID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("TeacherID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("TeacherModels");
                });

            modelBuilder.Entity("Finals.Models.TermModel", b =>
                {
                    b.Property<string>("TermId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("SchoolYearId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StandardTermId")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TermType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("TermId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("StandardTermId");

                    b.ToTable("Terms", (string)null);
                });

            modelBuilder.Entity("Finals.Models.TestModel", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID");

                    b.ToTable("TestModels", (string)null);
                });

            modelBuilder.Entity("Finals.Models.UserModel", b =>
                {
                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserRole")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("CreatorId");

                    b.ToTable("UserModels");
                });

            modelBuilder.Entity("Finals.Models.VenueModel", b =>
                {
                    b.Property<string>("VenueId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssignedCourseModelId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CourseModel_AssignedAssignedCourseModelId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Day")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(7);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VenueId");

                    b.HasIndex("AssignedCourseModelId");

                    b.HasIndex("CourseModel_AssignedAssignedCourseModelId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Finals.Services.SY_Services.SYTemplate", b =>
                {
                    b.Property<string>("TemplateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExtraTerms")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TermNames")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TemplateId");

                    b.ToTable("SYTemplates");
                });

            modelBuilder.Entity("ClassSectionModelCourseModel", b =>
                {
                    b.HasOne("Finals.Models.ClassSectionModel", null)
                        .WithMany()
                        .HasForeignKey("ClassSectionModelSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finals.Models.CourseModel", null)
                        .WithMany()
                        .HasForeignKey("DefaultCoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finals.Models.AdminModel", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("Finals.Models.AdminModel", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Finals.Models.ClassBatchModel", b =>
                {
                    b.HasOne("Finals.Models.ClassSectionModel", "ClassSection")
                        .WithMany()
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSection");
                });

            modelBuilder.Entity("Finals.Models.ClassEntryModel", b =>
                {
                    b.HasOne("Finals.Models.ClassBatchModel", "ClassBatch")
                        .WithMany("ClassEntries")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finals.Models.ClassSectionModel", "ClassSection")
                        .WithMany()
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finals.Models.UserModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassBatch");

                    b.Navigation("ClassSection");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionEditLog", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.ClassSectionModel", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EditedByUser");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionModel", b =>
                {
                    b.HasOne("Finals.Models.ProgramModel", "Program")
                        .WithMany("ClassSections")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionRegistration", b =>
                {
                    b.HasOne("Finals.Models.ClassSectionModel", "ClassSection")
                        .WithMany()
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finals.Models.ClassSectionTermDataModel", null)
                        .WithMany("Entrees")
                        .HasForeignKey("ClassSectionTermDataModelClassSectionTermDataId");

                    b.HasOne("Finals.Models.StudentModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSection");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionTermDataModel", b =>
                {
                    b.HasOne("Finals.Models.ClassSectionModel", "ClassSection")
                        .WithMany("TermData")
                        .HasForeignKey("ClassSectionId");

                    b.HasOne("Finals.Models.SchoolYearModel", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finals.Models.TermModel", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSection");

                    b.Navigation("SchoolYear");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionTransitionModel", b =>
                {
                    b.HasOne("Finals.Models.ClassSectionModel", "FromSection")
                        .WithMany("IncomingTransition")
                        .HasForeignKey("FromSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.ClassSectionModel", "ToSection")
                        .WithMany()
                        .HasForeignKey("ToSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromSection");

                    b.Navigation("ToSection");
                });

            modelBuilder.Entity("Finals.Models.CourseModel", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Finals.Models.CourseModel_Assigned", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.CourseModel", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.ClassSectionModel", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.TermModel", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.TeacherModel", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Finals.Models.ClassSectionTermDataModel", "Term")
                        .WithMany("AssignedCourses")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedBy");

                    b.Navigation("Course");

                    b.Navigation("Section");

                    b.Navigation("Semester");

                    b.Navigation("Teacher");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Finals.Models.CourseTemplateItem", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "Assigner")
                        .WithMany()
                        .HasForeignKey("AssignerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.CourseModel", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.CourseTemplateModel", "Template")
                        .WithMany("Items")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assigner");

                    b.Navigation("Course");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Finals.Models.CourseTemplateModel", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.ProgramModel", "Program")
                        .WithMany("courseTemplates")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Finals.Models.GradesClassification", b =>
                {
                    b.HasOne("Finals.Models.GradesClassification", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Finals.Models.GradesTreeModel", b =>
                {
                    b.HasOne("Finals.Models.GradesClassification", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("Finals.Models.ProgramModel", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.UserModel", "LastEditedBy")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastEditedBy");
                });

            modelBuilder.Entity("Finals.Models.ProgramModel_Edits", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.ProgramModel", "ProgramEdited")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EditedBy");

                    b.Navigation("ProgramEdited");
                });

            modelBuilder.Entity("Finals.Models.SchoolYearRegistration", b =>
                {
                    b.HasOne("Finals.Models.SchoolYearModel", "SchoolYear")
                        .WithMany("SchoolYearEntrees")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finals.Models.StudentModel", "Student")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Finals.Models.StudentModel", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("Finals.Models.StudentModel", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Finals.Models.TeacherModel", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("Finals.Models.TeacherModel", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Finals.Models.TermModel", b =>
                {
                    b.HasOne("Finals.Models.SchoolYearModel", "SchoolYear")
                        .WithMany("Terms")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finals.Models.TermModel", "StandardTerm")
                        .WithMany("ExtraTerms")
                        .HasForeignKey("StandardTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SchoolYear");

                    b.Navigation("StandardTerm");
                });

            modelBuilder.Entity("Finals.Models.UserModel", b =>
                {
                    b.HasOne("Finals.Models.UserModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Finals.Models.VenueModel", b =>
                {
                    b.HasOne("Finals.Models.CourseModel_Assigned", "AssignedCourseModel")
                        .WithMany()
                        .HasForeignKey("AssignedCourseModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finals.Models.CourseModel_Assigned", null)
                        .WithMany("Schedules")
                        .HasForeignKey("CourseModel_AssignedAssignedCourseModelId");

                    b.Navigation("AssignedCourseModel");
                });

            modelBuilder.Entity("Finals.Models.ClassBatchModel", b =>
                {
                    b.Navigation("ClassEntries");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionModel", b =>
                {
                    b.Navigation("IncomingTransition");

                    b.Navigation("TermData");
                });

            modelBuilder.Entity("Finals.Models.ClassSectionTermDataModel", b =>
                {
                    b.Navigation("AssignedCourses");

                    b.Navigation("Entrees");
                });

            modelBuilder.Entity("Finals.Models.CourseModel_Assigned", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Finals.Models.CourseTemplateModel", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Finals.Models.GradesClassification", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Finals.Models.ProgramModel", b =>
                {
                    b.Navigation("ClassSections");

                    b.Navigation("courseTemplates");
                });

            modelBuilder.Entity("Finals.Models.SchoolYearModel", b =>
                {
                    b.Navigation("SchoolYearEntrees");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Finals.Models.TermModel", b =>
                {
                    b.Navigation("ExtraTerms");
                });
#pragma warning restore 612, 618
        }
    }
}
